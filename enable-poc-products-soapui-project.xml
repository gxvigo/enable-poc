<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="051f39ab-c075-47bb-9218-1c453a765316" activeEnvironment="Default" name="enable-poc-products" resourceRoot="" soapui-version="5.2.1" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="8afca589-6602-4cdc-81e8-998d9949e67b" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://127.0.0.1:4002" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://giovannis-MacBook-Pro.local:8080/</con:endpoint><con:endpoint>https://127.0.0.1:4002</con:endpoint></con:endpoints><con:resource name="products" path="/api/products" id="c6eadf37-da67-4799-bb6b-cba94b855cdd"><con:settings/><con:parameters/><con:resource name="{uid}" path="{uid}" id="8df23458-0074-4113-b7ae-c08b68c7f9ac"><con:settings/><con:parameters><con:parameter><con:name>uid</con:name><con:value>uid</con:value><con:style>TEMPLATE</con:style><con:default>uid</con:default></con:parameter></con:parameters><con:method name="Method 1" id="2b8617ea-e35a-4bbf-9c7a-786550eb5d66" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ns="https://127.0.0.1/api/products/8723008025788416">ns:Response</con:element></con:representation><con:request name="Request 1" id="b46a178a-83d9-40f4-a35c-42758c741f02" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://127.0.0.1:4002</con:endpoint><con:request/><con:originalUri>https://127.0.0.1/api/products/8723008025788416</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="uid" value="8723008025788416" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource><con:method name="Method 1" id="6f505610-ebb1-48dc-8570-6cbd33110f7d" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:prod="https://127.0.0.1/api/products">prod:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element>Response</con:element></con:representation><con:request name="Request 1" id="f88a5b72-5e83-4280-a5b5-8f13266d2ab5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://127.0.0.1:4002</con:endpoint><con:request/><con:originalUri>https://127.0.0.1/api/products</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="process" path="/rest/bpm/wle/v1/process" id="a2ff4127-1ac9-4ab0-a436-288c4cabab07"><con:settings/><con:parameters/><con:method name="Method 1" id="62b77162-4c04-4467-a06a-d5e994b0df88" method="POST"><con:settings/><con:parameters><con:parameter><con:name>action</con:name><con:value>start</con:value><con:style>PLAIN</con:style><con:default>start</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>bpdId</con:name><con:value>25.c1206b63-1e94-4aaa-9dc1-76363270b441</con:value><con:style>PLAIN</con:style><con:default>25.c1206b63-1e94-4aaa-9dc1-76363270b441</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>processAppId</con:name><con:value>2066.d0e91cc6-a515-4965-ba6f-516bdbddcb00</con:value><con:style>PLAIN</con:style><con:default>2066.d0e91cc6-a515-4965-ba6f-516bdbddcb00</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>params</con:name><con:value>{ "ticketDetails" : {         "name": "Giovanni Vigorelli",         "DOB": "1974-05-02T05:07:13Z",         "driverLicense": "e345234",         "registration": "hdd843",         "ticketType": "Speeding",         "date": "2016-05-02T05:07:13Z",         "location": "34 Queen St, Auckland",         "ticketId": "12345",         "officer": "Oscar Nice"     }}</con:value><con:style>PLAIN</con:style><con:default>{ "ticketDetails" : {         "name": "Giovanni Vigorelli",         "DOB": "1974-05-02T05:07:13Z",         "driverLicense": "e345234",         "registration": "hdd843",         "ticketType": "Speeding",         "date": "2016-05-02T05:07:13Z",         "location": "34 Queen St, Auckland",         "ticketId": "12345",         "officer": "Oscar Nice"     }}</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>parts</con:name><con:value>all</con:value><con:style>PLAIN</con:style><con:default>all</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404</con:status><con:params/><con:element>HTML</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:proc="http://giovannis-MacBook-Pro.local/rest/bpm/wle/v1/process">proc:Response</con:element></con:representation><con:request name="Request 1" id="6c84659d-0524-4472-92c4-caa9bec631ed" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8080/</con:endpoint><con:request/><con:originalUri>http://giovannis-MacBook-Pro.local/rest/bpm/wle/v1/process</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:restMockService id="ac28ee93-b65b-4ea4-b4a2-f75bb566d337" port="8080" path="/" host="giovannis-MacBook-Pro.local"><con:settings/><con:properties/></con:restMockService><con:restMockService id="5c035999-89a2-43f8-861e-52d6d3a8e0dc" port="8080" path="/" host="localhost" name="REST MockService 1" docroot=""><con:settings/><con:properties/><con:restMockAction name="/api/products/8723008025788416" method="GET" resourcePath="/api/products/8723008025788416" id="aa573a07-cbdd-4ee3-8b5d-2cb13bc9ec96"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="7133499c-1ee9-4ea7-b367-5d4bd3e4b29c" httpResponseStatus="200" mediaType="application/json" encoding="utf-8"><con:settings/><con:responseContent>{"available":true,"description":"Jatwi me bolez kosji le elijupa japvi kew ahasoru motavogel sudve non bimsowej rivhoc.","name":"Jared Webster","price":98.22522761,"uid":"8723008025788416"}</con:responseContent><con:header><con:name>access-control-allow-headers</con:name><con:value/></con:header><con:header><con:name>ETag</con:name><con:value>W/"bd-+rHJ+zZj/ANHzWa2Qn7/0g"</con:value></con:header><con:header><con:name>access-control-allow-origin</con:name><con:value>*</con:value></con:header><con:header><con:name>X-RateLimit-Remaining</con:name><con:value>96</con:value></con:header><con:header><con:name>X-RateLimit-Limit</con:name><con:value>100</con:value></con:header><con:header><con:name>X-XSS-Protection</con:name><con:value>1; mode=block</con:value></con:header><con:header><con:name>access-control-expose-headers</con:name><con:value>APIm-Debug-Trans-Id, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-Global-Transaction-ID</con:value></con:header><con:header><con:name>Connection</con:name><con:value>close</con:value></con:header><con:header><con:name>Access-Control-Allow-Credentials</con:name><con:value>true</con:value></con:header><con:header><con:name>X-Powered-By</con:name><con:value>IBM API Connect MicroGateway</con:value></con:header><con:header><con:name>X-Content-Type-Options</con:name><con:value>nosniff</con:value></con:header><con:header><con:name>X-Frame-Options</con:name><con:value>DENY</con:value></con:header><con:header><con:name>Date</con:name><con:value>Thu, 09 Feb 2017 08:48:23 GMT</con:value></con:header><con:header><con:name>Vary</con:name><con:value>Origin, Accept-Encoding</con:value></con:header><con:header><con:name>X-Download-Options</con:name><con:value>noopen</con:value></con:header><con:header><con:name>access-control-allow-methods</con:name><con:value>GET,OPTIONS</con:value></con:header></con:response></con:restMockAction><con:restMockAction name="/api/products" method="GET" resourcePath="/api/products" id="0cd47883-7972-4694-bad6-16c1e4910554"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="42199bb6-1135-4350-bd01-b2e9ab174568" httpResponseStatus="200" mediaType="application/json" encoding="utf-8"><con:settings/><con:responseContent>[{"available":true,"description":"Fa do miz uszotkar cij vaganuw ba gap now cun lacotgi fav sovcuc obi zon.","name":"Lola Gray","price":62.86252577,"uid":"6516101353570304"},{"available":true,"description":"Jatwi me bolez kosji le elijupa japvi kew ahasoru motavogel sudve non bimsowej rivhoc.","name":"Jared Webster","price":98.22522761,"uid":"8723008025788416"}]</con:responseContent><con:header><con:name>access-control-allow-headers</con:name><con:value/></con:header><con:header><con:name>ETag</con:name><con:value>W/"16c-cOntLDh39YXXI6G4PH1B8g"</con:value></con:header><con:header><con:name>access-control-allow-origin</con:name><con:value>*</con:value></con:header><con:header><con:name>X-RateLimit-Remaining</con:name><con:value>95</con:value></con:header><con:header><con:name>X-RateLimit-Limit</con:name><con:value>100</con:value></con:header><con:header><con:name>X-XSS-Protection</con:name><con:value>1; mode=block</con:value></con:header><con:header><con:name>access-control-expose-headers</con:name><con:value>APIm-Debug-Trans-Id, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-Global-Transaction-ID</con:value></con:header><con:header><con:name>Connection</con:name><con:value>close</con:value></con:header><con:header><con:name>Access-Control-Allow-Credentials</con:name><con:value>true</con:value></con:header><con:header><con:name>X-Powered-By</con:name><con:value>IBM API Connect MicroGateway</con:value></con:header><con:header><con:name>X-Content-Type-Options</con:name><con:value>nosniff</con:value></con:header><con:header><con:name>X-Frame-Options</con:name><con:value>DENY</con:value></con:header><con:header><con:name>Date</con:name><con:value>Thu, 09 Feb 2017 08:47:13 GMT</con:value></con:header><con:header><con:name>Vary</con:name><con:value>Origin, Accept-Encoding</con:value></con:header><con:header><con:name>X-Download-Options</con:name><con:value>noopen</con:value></con:header><con:header><con:name>access-control-allow-methods</con:name><con:value>POST,GET,OPTIONS</con:value></con:header></con:response></con:restMockAction><con:restMockAction name="/rest/bpm/wle/v1/process" method="POST" resourcePath="/rest/bpm/wle/v1/process" id="4aac2bc8-dd8d-4a90-bf01-1fd2beab7934"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="39a29e51-96e7-4acf-ab54-fa898b9088db" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{"status":"started"}</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/></con:soapui-project>